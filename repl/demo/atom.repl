(def tab ((requiring-resolve 'tab.api/run) {:port 8080}))

;; Hukari is a personal REPL utility lib.
((requiring-resolve 'clojure.tools.deps.alpha.repl/add-libs)
 '{me.flowthing/hukari {:git/url "https://github.com/eerohele/hukari.git"
                        :git/sha "9e4103ac6013ab01b3667754441b7185f4e4f49b"}})

;; It has a function that datafies (via clojure.datafy/datafy) a bunch of
;; MXBeans that expose information about the JVM and the runtime.
(require '[hukari.repl :refer [runtime-stats]])
(tap> (runtime-stats))

(def a (atom (runtime-stats)))

;; If you tap an atom, Tab updates every time you update the atom.
;;
;; The first tap of an atom looks a bit weird, since an atom datafies as
;; [(deref a)] (Clojure puts the value of the atom into a vector).
;;
;; Subsequent taps look better.
(tap> a)

(defn every-second
  "Given a no-arg fn, call the fn every second.
  
  To halt, call the ret value (a no-arg fn)."
  [f]
  (let [executor-service (java.util.concurrent.Executors/newScheduledThreadPool 1)
        _ (.scheduleAtFixedRate executor-service f 0 1 java.util.concurrent.TimeUnit/SECONDS)]
    (fn [] (.shutdown executor-service))))

;; Start a timer that taps the runtime stats every second. 
(def timer (every-second #(tap> (runtime-stats))))

;; Halt the timer.
(timer)

;; Halt Tab.
((requiring-resolve 'tab.api/halt) tab)
